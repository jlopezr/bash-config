#!/bin/bash

# Java
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`

# Servlet (for Jease)
export SERVLET_API=/Users/juan/Dropbox/Proyectos/jease/lib/servlet-api.jar

# GMSEC
export GMSEC_PLATFORM=macosx.x86_64
export GMSEC_HOME=~/Dropbox/Proyectos/IPM/GMSEC/GMSEC_API-3.5
export LD_LIBRARY_PATH=$GMSEC_HOME/bin

# Scala (for swagger-play)
export SCALA_HOME=/usr/local/share/scala-2.9.1-1

# Android
PATH=$PATH:/Applications/android-sdk-macosx/platform-tools:/Applications/android-sdk-macosx/tools
ANDROID_HOME=/Applications/android-sdk-macosx

# Android AOSP
ulimit -S -n 1024

# Rust
alias cargo='DYLD_LIBRARY_PATH=/opt/local/lib /usr/local/bin/cargo'
export RUST_SRC_PATH=/usr/local/src/rust/src

#Go
export GOPATH=$HOME/work
export GOROOT=`env go env GOROOT`
PATH=$PATH:$GOROOT/bin:$GOPATH/bin

#Mysql
alias mysqlstart='sudo -b /opt/local/bin/mysqld_safe5' 
alias mysqlstop='/opt/local/bin/mysqladmin5 -u root -p shutdown'

#Platformio
export PATH=$PATH:/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin

#CUDA & TensorFlow
export CUDA_HOME=/usr/local/cuda
export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$CUDA_HOME/lib"
export PATH="$CUDA_HOME/bin:$PATH"

###CPCTELERA_START
##
## These lines configure CPCtelera in your system
##
export CPCT_PATH=/Users/juan/cpctelera/cpctelera
export PATH=${PATH}:/Users/juan/cpctelera/cpctelera/tools/scripts
export CPCTELERA_PATH=$CPCT_PATH
###CPCTELERA_END

# DOCKER
dps() { docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}" $*; }
dpsa() { docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}" -a $*; }
dports() { docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}" $*; }
dtail() { docker logs --tail=10 -f `docker-compose ps -q $1`; }
dlog() { docker logs $2 `docker-compose ps -q $1`; }
dc() { docker-compose $@; }
dpid() { docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}'; }
dip() { ID=`docker-compose ps -q $1`; rc=$?; if [[ $rc == 0 ]]; then docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $ID; fi; }
dips() { [[ $# -eq 0 ]] && GREP_OPT="." || GREP_OPT="$1"; docker ps -q | xargs docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}} {{.Name}}' | grep $GREP_OPT; }
dcbug() { dc run --rm $@ /bin/bash; }
dtop() { docker stats $(docker ps --format={{.Names}}); }
dexec() { dc exec $*; }
dbash() { dc exec $* /bin/bash; }
alias dtree='docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz images -t'
alias drmc='docker rm $(docker ps -qa --no-trunc --filter "status=exited")'
alias drmi='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'

# added by travis gem
[ -f /Users/juan/.travis/travis.sh ] && source /Users/juan/.travis/travis.sh
